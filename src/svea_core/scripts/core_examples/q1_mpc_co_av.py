#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division

import rospy
import numpy as np

from svea.states import VehicleState
from svea.localizers import LocalizationInterface
from svea.data import BasicDataHandler, TrajDataHandler, RVIZPathHandler
from svea.models.bicycle import SimpleBicycleModel
from svea.simulators.sim_SVEA import SimSVEA
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Path
from std_msgs.msg import Bool, Float32MultiArray

from svea.svea_managers.mpc_path_following_sveas import SVEAMPC
from svea.controllers.mpc.mpc import MPC
from svea.controllers.mpc.parameters import parameters

from svea.track import Track

"""
__team__ = "Team 1"
__maintainers__ = "Roberto Castro Sundin, Astrid Lindstedt, Johan Hedin, Aravind Sadashiv, Sarthak Manocha‚Äù
__status__ = "Development"
"""

## SIMULATION PARAMS ##########################################################
param_name = "ZOH-good"
params = parameters.get(param_name)

vehicle_name = ""
target_velocity = params.target_velocity# [m/s]
dt = params.dt # frequency of the model updates

traj_x_init =  [0.0, 0.3970152951844882, 0.7949160416307335, 1.194882709004963, 1.5938927281820854, 1.969158200955605, 2.2769649823962363, 2.5363254108050395, 2.796523521527946, 3.056011354938678, 3.325775041783727, 3.6469844544421632, 4.030080667110768, 4.4300633544135675, 4.8299219779746725, 5.229835865376676, 5.62891627739474, 5.997892458710568, 6.331456415803458, 6.663748136986109, 6.995825428200018, 7.327562225164367, 7.657595790373666, 7.981356869154896, 8.314776013403305, 8.640700501115138, 9.004946772138064, 9.40001093290932, 9.795959189914505, 10.191912764227464, 10.587854794611438, 10.98380573478521, 11.37968780470507, 11.775748828979744, 12.16797998867662, 12.562055570496122, 12.955538121298778, 13.348285431943975, 13.743039353244956, 14.134808032386275, 14.530199530683765, 14.92408124280592, 15.32346058187343, 15.72348680997623, 16.123287881615987, 16.522604967938513, 16.92253065163866, 17.32185325289521, 17.72167208863961, 18.120738710252155, 18.498880938350716, 18.813110813338735, 19.028114083915522, 19.13147598436156, 19.242223812585937, 19.39275530148327, 19.447668399643117, 19.45987407444446, 19.47605323744688, 19.491108145479128, 19.462028024297542, 19.303386387996536, 19.032696658696285, 18.68016731633384, 18.28604914730243, 17.88811146649408, 17.490042211895044, 17.09206925861236, 16.69404211474242, 16.29599038470714, 15.89801693297977, 15.499990279226315, 15.10193707906526, 14.703947979548284, 14.30605227406383, 13.906817030639028, 13.50878929478461, 13.110002275377736, 12.711440671764118, 12.313230111056255, 11.914129134919566, 11.516325483424032, 11.116931126361695, 10.719190319600186, 10.319921355872314, 9.921899662049046, 9.523104255258689, 9.12455391272167, 8.726392799699308, 8.326589329897624, 7.928134623147803, 7.529878472650348, 7.1310775952873175, 6.731166991635749, 6.341115471815019, 5.998172931725923, 5.713839836885226, 5.43523061251047, 5.156723807922349, 4.878063580011592, 4.5993254315250045, 4.321217214776714, 4.018737079340099, 3.650335349979457, 3.252016148763709, 2.8681095033752513, 2.541058727555579, 2.255118830465906, 1.9657902904372548, 1.6775510434634133, 1.3883419032919724, 1.1028686455971688, 0.7847313511524866, 0.4060603882005029, 0.0071166294605670725, -0.38964085189955405, -0.7886597579398823, -1.1873933611381542, -1.5861658851568903, -1.9849403977888203, -2.3837134397484654, -2.7824866823362324, -3.1812599351748485, -3.580033180432478, -3.978806426724301, -4.377579673068965, -4.776352919374556, -5.175126165685469, -5.5738994119966705, -5.972672658307641, -6.371445904618267, -6.77021915093194, -7.168992397240012, -7.567765643475923, -7.966538890301158, -8.365312136041563, -8.764085367782766, -9.16285871385019, -9.561631849465954, -9.960402269306435, -10.359194867846423, -10.757946639848843, -11.156117701391501, -11.555044707054899, -11.953836054842398, -12.334413837278035, -12.706838957343951, -13.079609358514793, -13.451206548226724, -13.807539022524097, -14.097985388580527, -14.281258072465556, -14.33471438102138, -14.295478307110116, -14.250575190772286, -14.205304308966785, -14.16024125991543, -14.115562047947948, -14.064809644962558, -13.978289799144298, -13.775360968025941, -13.470861997376117, -13.097979637312596, -12.701472310811813, -12.303070652726626, -11.904691673387974, -11.506310062655778, -11.107928083188135, -10.70954637017629, -10.311168263036087, -9.912764730158672, -9.5143901943059, -9.114566119686819, -8.729381188278932, -8.40034455526727, -8.161151314323421, -8.002434375928853, -7.961129042852188, -7.983827890733702, -7.949803192838047, -7.804613092280166, -7.543733552921224, -7.197609966152073, -6.805297099963484, -6.411816274024558, -6.043157335282016, -5.688404403725891, -5.408186907675219, -5.23616527430911, -5.194470709946565, -5.1985411827092225, -5.19746221396982, -5.14097430774665, -4.96123534970724, -4.674326290201955, -4.3116384158983845, -3.925728343927682, -3.53728817589405, -3.145458538087468, -2.748767902125341, -2.3495897548179583, -1.951513156296159, -1.5517573297530978, -1.1529377275285135, -0.7536273061463838]
traj_y_init=  [0.0, 0.04885191113786227, 0.08793344847635556, 0.08756183814527088, 0.09318849247558171, 0.23191634240178693, 0.4856492320367536, 0.7901524958695099, 1.09397587548, 1.398397752970759, 1.6941009585943463, 1.929500294061544, 2.043351504061431, 2.0371335629414764, 2.032447088117864, 2.0241540580837336, 2.007267345542541, 1.8552824010197724, 1.634234683008355, 1.4115661678695701, 1.18858033171721, 0.9650934293578216, 0.7392607022449988, 0.50458230077913, 0.2834660675433487, 0.05107863734759109, -0.10976316621062064, -0.1744643878282318, -0.23121779135703577, -0.2878918182003723, -0.34473945830695846, -0.4015175709822078, -0.4587010313086076, -0.5148311259277646, -0.5933782922029834, -0.6609922396271929, -0.7322708005833045, -0.8076214525685157, -0.8714715340794182, -0.952556866410943, -1.0124182127220547, -1.0834493816098982, -1.0954899693465616, -1.0957802405355, -1.087471312681097, -1.0629465985756255, -1.0601646683045522, -1.034811432473039, -1.0295394343079, -1.0043948021672133, -0.8770009786678163, -0.6307210898888014, -0.29458766172353396, 0.09163758700749221, 0.4753618619092355, 0.8458534631970431, 1.2414041060308378, 1.641282477555838, 2.0408196678427077, 2.4422958769371568, 2.840924737951086, 3.207079822820284, 3.499945391464769, 3.687739351188746, 3.7546157517253906, 3.793705485858321, 3.8332479990622144, 3.873456885181261, 3.9131213280247406, 3.952548787745082, 3.99275785980571, 4.032437572277192, 4.071843204060905, 4.111831536070871, 4.153360600681758, 4.176196977371035, 4.216017375055643, 4.244934387932348, 4.2774459702455685, 4.314304825200973, 4.339311994481893, 4.381892302930688, 4.402708281148841, 4.446330433656247, 4.468711455554707, 4.50861381005127, 4.5374148544212325, 4.5700835654413465, 4.607644499481222, 4.62274599268521, 4.656731995707999, 4.693301844139287, 4.71968486663297, 4.756194365577003, 4.838434773840251, 5.042457161965224, 5.323860791582111, 5.610872849211906, 5.897989281531854, 6.18494160186868, 6.471647630926343, 6.761268816842035, 7.022170790512122, 7.17583578245679, 7.199267820271638, 7.089815234672386, 6.861027141625332, 6.581146963229546, 6.304963834938995, 6.027581282533144, 5.751552778226652, 5.468707462639155, 5.229147510994295, 5.10074169397195, 5.106238176003025, 5.156142438999902, 5.185588642933584, 5.217191656734626, 5.248500439994466, 5.279794189893543, 5.311099057664671, 5.342402408743223, 5.3737056823281675, 5.405009013223252, 5.436312336300127, 5.467615658977537, 5.49891898195037, 5.53022230488291, 5.561525627813311, 5.592828950745384, 5.624132273679161, 5.655435596597303, 5.686738919544216, 5.71804224286231, 5.7493455631491, 5.780648889015917, 5.8119522868902145, 5.843255096706918, 5.874558989019712, 5.905876850412613, 5.937080631663292, 5.968494411575621, 6.003130929718834, 6.059031585858515, 6.058927446158728, 5.935702529945456, 5.79054285620842, 5.645367666108261, 5.497289581901186, 5.315041741747, 5.041861250487358, 4.687097829497458, 4.291912445496892, 3.8937469434307252, 3.4962696877092476, 3.09884528381092, 2.701390608475437, 2.3038669423448073, 1.9072751143743705, 1.51684829021397, 1.1730189335287384, 0.9150303623309298, 0.7725084504934789, 0.7201595467258669, 0.6848560547675818, 0.6488224018322029, 0.612873937108676, 0.576934070512259, 0.5409893609552663, 0.5050189732245739, 0.46923208435950625, 0.4332360792713855, 0.42916170062266007, 0.5328386798004362, 0.759033602632514, 1.0789499517551147, 1.4460910611250668, 1.8427905849310355, 2.2419696027317757, 2.640755182994864, 3.0121083745128043, 3.3141658899156483, 3.513206460753693, 3.586730864693, 3.5241674335812108, 3.368077223133574, 3.1836106822171035, 2.8993658190928993, 2.5388741230387413, 2.1419318941499816, 1.7419960924546116, 1.3419795832992354, 0.9464680755973951, 0.5900630515422984, 0.31233803468596977, 0.14563470151084637, 0.04042737335473797, -0.05463838156357541, -0.13505840090915053, -0.179496952044338, -0.14820682198747556, -0.10972792756661992, -0.09463826338291201, -0.06608033887514082, -0.0443093808263668]

###############################################################################

## INIT #######################################################################
default_init_pt = [0.0, 0.0, 0.0, 0.0] # [x, y, yaw, v], units: [m, m, rad, m/s]
###############################################################################

class Node:
    def __init__(self):
        rospy.init_node('q1_mpc_co_av')
        initial_traj_pub = rospy.Publisher('init_traj', Float32MultiArray, queue_size=1, latch=True)
        initial_traj_pub.publish(Float32MultiArray(data=traj_x_init+traj_y_init)) # TODO: This assumes traj_x_init are python arrays

        # grab parameters from launch-file
        start_pt_param = rospy.search_param('start_pt')
        is_sim_param = rospy.search_param('is_sim')
        use_rviz_param = rospy.search_param('use_rviz')
        use_matplotlib_param = rospy.search_param('use_matplotlib')
        run_lidar_param = rospy.search_param('run_lidar')

        start_pt = rospy.get_param(start_pt_param, default_init_pt)
        if isinstance(start_pt, str):
            start_pt = start_pt.split(',')
            start_pt = [float(curr) for curr in start_pt]
            start_pt = VehicleState(*start_pt)

        self.is_sim = rospy.get_param(is_sim_param, True)
        self.use_rviz = rospy.get_param(use_rviz_param, False)
        self.use_matplotlib = rospy.get_param(use_matplotlib_param, False)
        self.run_lidar = rospy.get_param(run_lidar_param, True)

        #This subscriber and its callback function is the local planner
        traj_upd_sub = rospy.Subscriber('trajectory_updates', Path, self.callback_traj)
        collision_sub = rospy.Subscriber('collision', Bool, self.callback_collision)
        self.coll_t = None
        # select data handler based on the ros params
        if self.use_rviz:
            self.DataHandler = RVIZPathHandler
        elif self.use_matplotlib:
            self.DataHandler = TrajDataHandler
        else:
            # DataHandler = BasicDataHandler
            self.DataHandler = RVIZPathHandler

        if self.is_sim:
            # start the simulation
            model_for_sim = SimpleBicycleModel(start_pt)
            self.simulator = SimSVEA(vehicle_name, model_for_sim,
                                dt=dt, start_paused=True, run_lidar=self.run_lidar).start()

        self.collision = False

        self.traj_x = traj_x_init
        self.traj_y = traj_y_init

    def callback_traj(self,path):
        self.traj_x = [i.pose.position.x for i in path.poses]
        self.traj_y = [i.pose.position.y for i in path.poses]
        # self.svea.update_traj(self.traj_x, self.traj_y)
        # if MPC.. this calculates speed profile etc.
        self.svea.update_traj_mpc(self.traj_x, self.traj_y)

    def callback_collision(self, data):
        # print(data.data)
        self.collision = data.data

    def run(self):
        self.svea = SVEAMPC(
            vehicle_name,
            LocalizationInterface,
            MPC,
            self.traj_x, self.traj_y,
            data_handler = self.DataHandler,
            target_velocity=params.target_velocity,
            dl = dt*params.low_lim,
            low_lim = params.low_lim,
        )

        ulb = [-1e2,-np.deg2rad(40)]
        uub = [ 1e2, np.deg2rad(40)]
        xlb = [-np.inf]*3+[-1]
        xub = [ np.inf]*3+[3.6]

        # To use this again, switch from update_traj to update_traj_mpc
        self.svea.controller.build_solver(
            dt,
            Q=params.Q,
            R=params.R,
            P=params.P,
            ulb=ulb,
            uub=uub,
            xlb=xlb,
            xub=xub,
            max_cpu_time=0.8*dt,
            horizon=params.horizon,
            model_type=params.model_type,
            solver_=params.solver_,
            TAU = params.TAU,
            N_IND_SEARCH = params.N_IND_SEARCH,
        )
        self.svea.update_traj_mpc(self.traj_x, self.traj_y)
        # self.svea.update_traj(self.traj_x, self.traj_y)
        self.svea.start(wait=True)

        track = Track(vehicle_name, publish_track=True)
        track.start()

        if self.is_sim:
            # start simulation
            self.simulator.toggle_pause_simulation()

        # simulation loop
        self.svea.controller.target_velocity = target_velocity
        self.svea.pid.target_velocity = target_velocity
        self.svea.pid.k = 0.5  # look forward gain
        self.svea.pid.Lfc = 0.4 # look-ahead distance
        self.svea.pid.K_p = 1.2  # speed control propotional gain
        self.svea.pid.K_i = 0  # speed control integral gain
        self.svea.pid.K_d = 0.0  # speed control derivitive gain
        self.svea.pid.L = 0.324  # [m] wheel base of vehicle
        while not self.svea.is_finished and not rospy.is_shutdown():
            state = self.svea.wait_for_state()

            # compute control input
            if self.collision:
                self.svea.send_control(0, 0)
            else:
                steering, velocity = self.svea.compute_control()
                # steering, velocity = self.svea.compute_pid_control()
                self.svea.send_control(steering, velocity)

            # visualize data
            if self.use_matplotlib or self.use_rviz:
                self.svea.visualize_data()
            else:
                self.svea.visualize_data()
                # rospy.loginfo_throttle(1, state)

        if not rospy.is_shutdown():
            rospy.loginfo("Trajectory finished!")

        rospy.spin()

if __name__ == '__main__':
	try:
		node = Node()
		node.run()
	except rospy.ROSInterruptException:
		pass
